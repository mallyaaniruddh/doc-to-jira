name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:  # Allow manual triggering

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8, 3.9, '3.10', '3.11', '3.12']
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
    
    - name: Lint with flake8
      run: |
        # Stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings. GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Type checking with mypy
      run: |
        mypy --ignore-missing-imports --no-strict-optional doc_to_jira.py main_jira.py
      continue-on-error: true  # Don't fail build on type errors initially
    
    - name: Run unit tests with coverage
      run: |
        python -m pytest test_doc_to_jira.py -v --cov=doc_to_jira --cov-report=xml --cov-report=term-missing
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
    
    - name: Test JSON file structure
      run: |
        python -c "
        import json
        import sys
        try:
            with open('user_stories.json', 'r') as f:
                data = json.load(f)
            if not isinstance(data, list):
                print('❌ JSON should be a list')
                sys.exit(1)
            print(f'✅ JSON structure valid: {len(data)} entries')
        except Exception as e:
            print(f'❌ JSON validation failed: {e}')
            sys.exit(1)
        "
    
    - name: Validate imports and basic functionality
      run: |
        python -c "
        import sys
        try:
            from doc_to_jira import DocToJira, JiraConnectionError, JiraConfigurationError
            from main_jira import validate_json_structure
            print('✅ All imports successful')
            
            # Test JSON validation function
            result = validate_json_structure('user_stories.json')
            print(f'✅ JSON validation function works: {result}')
        except ImportError as e:
            print(f'❌ Import error: {e}')
            sys.exit(1)
        except Exception as e:
            print(f'❌ Validation error: {e}')
            sys.exit(1)
        "

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install safety bandit
    
    - name: Run safety check
      run: |
        pip install -r requirements.txt
        safety check --json || true
    
    - name: Run bandit security scan
      run: |
        bandit -r . -x test_*.py -f json || true

  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-dev.txt
    
    - name: Run pylint
      run: |
        pylint doc_to_jira.py main_jira.py --exit-zero --output-format=text
    
    - name: Run black formatter check
      run: |
        black --check --diff .
    
    - name: Run isort import sorting check
      run: |
        isort --check-only --diff .

  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Test with mock Jira server
      run: |
        python -c "
        import os
        from unittest.mock import patch, Mock
        
        # Mock environment for integration test
        env_vars = {
            'JIRA_BASE_URL': 'https://mock.atlassian.net',
            'JIRA_EMAIL': 'test@example.com',
            'JIRA_API_TOKEN': 'mock-token',
            'JIRA_PROJECT_KEY': 'MOCK'
        }
        
        with patch.dict(os.environ, env_vars):
            with patch('doc_to_jira.JIRA') as mock_jira:
                mock_instance = Mock()
                mock_issue = Mock()
                mock_issue.key = 'MOCK-123'
                mock_instance.create_issue.return_value = mock_issue
                mock_instance.current_user.return_value = 'mock_user'
                mock_jira.return_value = mock_instance
                
                from main_jira import run_jira_from_raw
                result = run_jira_from_raw()
                print(f'✅ Integration test passed: {result}')
        "

  build-status:
    name: Build Status
    runs-on: ubuntu-latest
    needs: [test, security, code-quality]
    if: always()
    
    steps:
    - name: Check build status
      run: |
        if [[ "${{ needs.test.result }}" == "success" && 
              "${{ needs.security.result }}" == "success" && 
              "${{ needs.code-quality.result }}" == "success" ]]; then
          echo "✅ All checks passed!"
          echo "BUILD_STATUS=success" >> $GITHUB_ENV
        else
          echo "❌ Some checks failed"
          echo "BUILD_STATUS=failure" >> $GITHUB_ENV
          exit 1
        fi
    
    - name: Create status badge
      if: github.ref == 'refs/heads/main'
      run: |
        echo "Build status: $BUILD_STATUS" > build_status.txt